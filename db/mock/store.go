// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moth13/finance_tracker/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/moth13/finance_tracker/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccountBalance mocks base method.
func (m *MockStore) AddAccountBalance(arg0 context.Context, arg1 db.AddAccountBalanceParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountBalance indicates an expected call of AddAccountBalance.
func (mr *MockStoreMockRecorder) AddAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBalance", reflect.TypeOf((*MockStore)(nil).AddAccountBalance), arg0, arg1)
}

// AddLineTx mocks base method.
func (m *MockStore) AddLineTx(arg0 context.Context, arg1 db.AddLineTxParams) (db.AddLineTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLineTx", arg0, arg1)
	ret0, _ := ret[0].(db.AddLineTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLineTx indicates an expected call of AddLineTx.
func (mr *MockStoreMockRecorder) AddLineTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLineTx", reflect.TypeOf((*MockStore)(nil).AddLineTx), arg0, arg1)
}

// AddMonthBalance mocks base method.
func (m *MockStore) AddMonthBalance(arg0 context.Context, arg1 db.AddMonthBalanceParams) (db.Month, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMonthBalance", arg0, arg1)
	ret0, _ := ret[0].(db.Month)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMonthBalance indicates an expected call of AddMonthBalance.
func (mr *MockStoreMockRecorder) AddMonthBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMonthBalance", reflect.TypeOf((*MockStore)(nil).AddMonthBalance), arg0, arg1)
}

// AddYearBalance mocks base method.
func (m *MockStore) AddYearBalance(arg0 context.Context, arg1 db.AddYearBalanceParams) (db.Year, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddYearBalance", arg0, arg1)
	ret0, _ := ret[0].(db.Year)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddYearBalance indicates an expected call of AddYearBalance.
func (mr *MockStoreMockRecorder) AddYearBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddYearBalance", reflect.TypeOf((*MockStore)(nil).AddYearBalance), arg0, arg1)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 db.CreateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 db.CreateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateLine mocks base method.
func (m *MockStore) CreateLine(arg0 context.Context, arg1 db.CreateLineParams) (db.Line, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLine", arg0, arg1)
	ret0, _ := ret[0].(db.Line)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLine indicates an expected call of CreateLine.
func (mr *MockStoreMockRecorder) CreateLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLine", reflect.TypeOf((*MockStore)(nil).CreateLine), arg0, arg1)
}

// CreateMonth mocks base method.
func (m *MockStore) CreateMonth(arg0 context.Context, arg1 db.CreateMonthParams) (db.Month, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonth", arg0, arg1)
	ret0, _ := ret[0].(db.Month)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonth indicates an expected call of CreateMonth.
func (mr *MockStoreMockRecorder) CreateMonth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonth", reflect.TypeOf((*MockStore)(nil).CreateMonth), arg0, arg1)
}

// CreateRecLine mocks base method.
func (m *MockStore) CreateRecLine(arg0 context.Context, arg1 db.CreateRecLineParams) (db.Recline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecLine", arg0, arg1)
	ret0, _ := ret[0].(db.Recline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecLine indicates an expected call of CreateRecLine.
func (mr *MockStoreMockRecorder) CreateRecLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecLine", reflect.TypeOf((*MockStore)(nil).CreateRecLine), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateYear mocks base method.
func (m *MockStore) CreateYear(arg0 context.Context, arg1 db.CreateYearParams) (db.Year, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateYear", arg0, arg1)
	ret0, _ := ret[0].(db.Year)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateYear indicates an expected call of CreateYear.
func (mr *MockStoreMockRecorder) CreateYear(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateYear", reflect.TypeOf((*MockStore)(nil).CreateYear), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), arg0, arg1)
}

// DeleteLine mocks base method.
func (m *MockStore) DeleteLine(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLine indicates an expected call of DeleteLine.
func (mr *MockStoreMockRecorder) DeleteLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLine", reflect.TypeOf((*MockStore)(nil).DeleteLine), arg0, arg1)
}

// DeleteLineTx mocks base method.
func (m *MockStore) DeleteLineTx(arg0 context.Context, arg1 db.DeleteLineTxParams) (db.DeleteLineTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLineTx", arg0, arg1)
	ret0, _ := ret[0].(db.DeleteLineTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLineTx indicates an expected call of DeleteLineTx.
func (mr *MockStoreMockRecorder) DeleteLineTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLineTx", reflect.TypeOf((*MockStore)(nil).DeleteLineTx), arg0, arg1)
}

// DeleteMonth mocks base method.
func (m *MockStore) DeleteMonth(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonth", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMonth indicates an expected call of DeleteMonth.
func (mr *MockStoreMockRecorder) DeleteMonth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonth", reflect.TypeOf((*MockStore)(nil).DeleteMonth), arg0, arg1)
}

// DeleteRecLine mocks base method.
func (m *MockStore) DeleteRecLine(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecLine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecLine indicates an expected call of DeleteRecLine.
func (mr *MockStoreMockRecorder) DeleteRecLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecLine", reflect.TypeOf((*MockStore)(nil).DeleteRecLine), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteYear mocks base method.
func (m *MockStore) DeleteYear(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteYear", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteYear indicates an expected call of DeleteYear.
func (mr *MockStoreMockRecorder) DeleteYear(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteYear", reflect.TypeOf((*MockStore)(nil).DeleteYear), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockStore) GetAccount(arg0 context.Context, arg1 int64) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)
}

// GetAccountForUpdate mocks base method.
func (m *MockStore) GetAccountForUpdate(arg0 context.Context, arg1 int64) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountForUpdate indicates an expected call of GetAccountForUpdate.
func (mr *MockStoreMockRecorder) GetAccountForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountForUpdate", reflect.TypeOf((*MockStore)(nil).GetAccountForUpdate), arg0, arg1)
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(arg0 context.Context, arg1 int64) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), arg0, arg1)
}

// GetCategoryForUpdate mocks base method.
func (m *MockStore) GetCategoryForUpdate(arg0 context.Context, arg1 int64) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryForUpdate indicates an expected call of GetCategoryForUpdate.
func (mr *MockStoreMockRecorder) GetCategoryForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryForUpdate", reflect.TypeOf((*MockStore)(nil).GetCategoryForUpdate), arg0, arg1)
}

// GetExpliciteLine mocks base method.
func (m *MockStore) GetExpliciteLine(arg0 context.Context, arg1 int64) (db.GetExpliciteLineRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpliciteLine", arg0, arg1)
	ret0, _ := ret[0].(db.GetExpliciteLineRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpliciteLine indicates an expected call of GetExpliciteLine.
func (mr *MockStoreMockRecorder) GetExpliciteLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpliciteLine", reflect.TypeOf((*MockStore)(nil).GetExpliciteLine), arg0, arg1)
}

// GetLine mocks base method.
func (m *MockStore) GetLine(arg0 context.Context, arg1 int64) (db.Line, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLine", arg0, arg1)
	ret0, _ := ret[0].(db.Line)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLine indicates an expected call of GetLine.
func (mr *MockStoreMockRecorder) GetLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLine", reflect.TypeOf((*MockStore)(nil).GetLine), arg0, arg1)
}

// GetLineForUpdate mocks base method.
func (m *MockStore) GetLineForUpdate(arg0 context.Context, arg1 int64) (db.Line, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Line)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineForUpdate indicates an expected call of GetLineForUpdate.
func (mr *MockStoreMockRecorder) GetLineForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineForUpdate", reflect.TypeOf((*MockStore)(nil).GetLineForUpdate), arg0, arg1)
}

// GetMonth mocks base method.
func (m *MockStore) GetMonth(arg0 context.Context, arg1 int64) (db.Month, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonth", arg0, arg1)
	ret0, _ := ret[0].(db.Month)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonth indicates an expected call of GetMonth.
func (mr *MockStoreMockRecorder) GetMonth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonth", reflect.TypeOf((*MockStore)(nil).GetMonth), arg0, arg1)
}

// GetMonthForUpdate mocks base method.
func (m *MockStore) GetMonthForUpdate(arg0 context.Context, arg1 int64) (db.Month, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Month)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthForUpdate indicates an expected call of GetMonthForUpdate.
func (mr *MockStoreMockRecorder) GetMonthForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthForUpdate", reflect.TypeOf((*MockStore)(nil).GetMonthForUpdate), arg0, arg1)
}

// GetRecLine mocks base method.
func (m *MockStore) GetRecLine(arg0 context.Context, arg1 int64) (db.Recline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecLine", arg0, arg1)
	ret0, _ := ret[0].(db.Recline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecLine indicates an expected call of GetRecLine.
func (mr *MockStoreMockRecorder) GetRecLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecLine", reflect.TypeOf((*MockStore)(nil).GetRecLine), arg0, arg1)
}

// GetRecLineForUpdate mocks base method.
func (m *MockStore) GetRecLineForUpdate(arg0 context.Context, arg1 int64) (db.Recline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecLineForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Recline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecLineForUpdate indicates an expected call of GetRecLineForUpdate.
func (mr *MockStoreMockRecorder) GetRecLineForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecLineForUpdate", reflect.TypeOf((*MockStore)(nil).GetRecLineForUpdate), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetYear mocks base method.
func (m *MockStore) GetYear(arg0 context.Context, arg1 int64) (db.Year, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYear", arg0, arg1)
	ret0, _ := ret[0].(db.Year)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYear indicates an expected call of GetYear.
func (mr *MockStoreMockRecorder) GetYear(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYear", reflect.TypeOf((*MockStore)(nil).GetYear), arg0, arg1)
}

// GetYearForUpdate mocks base method.
func (m *MockStore) GetYearForUpdate(arg0 context.Context, arg1 int64) (db.Year, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Year)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearForUpdate indicates an expected call of GetYearForUpdate.
func (mr *MockStoreMockRecorder) GetYearForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearForUpdate", reflect.TypeOf((*MockStore)(nil).GetYearForUpdate), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockStore) ListAccounts(arg0 context.Context, arg1 db.ListAccountsParams) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockStoreMockRecorder) ListAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockStore)(nil).ListAccounts), arg0, arg1)
}

// ListCategories mocks base method.
func (m *MockStore) ListCategories(arg0 context.Context, arg1 db.ListCategoriesParams) ([]db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockStoreMockRecorder) ListCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockStore)(nil).ListCategories), arg0, arg1)
}

// ListExplicitLines mocks base method.
func (m *MockStore) ListExplicitLines(arg0 context.Context, arg1 db.ListExplicitLinesParams) ([]db.ListExplicitLinesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExplicitLines", arg0, arg1)
	ret0, _ := ret[0].([]db.ListExplicitLinesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExplicitLines indicates an expected call of ListExplicitLines.
func (mr *MockStoreMockRecorder) ListExplicitLines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExplicitLines", reflect.TypeOf((*MockStore)(nil).ListExplicitLines), arg0, arg1)
}

// ListLines mocks base method.
func (m *MockStore) ListLines(arg0 context.Context, arg1 db.ListLinesParams) ([]db.Line, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLines", arg0, arg1)
	ret0, _ := ret[0].([]db.Line)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLines indicates an expected call of ListLines.
func (mr *MockStoreMockRecorder) ListLines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLines", reflect.TypeOf((*MockStore)(nil).ListLines), arg0, arg1)
}

// ListMonths mocks base method.
func (m *MockStore) ListMonths(arg0 context.Context, arg1 db.ListMonthsParams) ([]db.Month, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonths", arg0, arg1)
	ret0, _ := ret[0].([]db.Month)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonths indicates an expected call of ListMonths.
func (mr *MockStoreMockRecorder) ListMonths(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonths", reflect.TypeOf((*MockStore)(nil).ListMonths), arg0, arg1)
}

// ListRecLines mocks base method.
func (m *MockStore) ListRecLines(arg0 context.Context, arg1 db.ListRecLinesParams) ([]db.Recline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecLines", arg0, arg1)
	ret0, _ := ret[0].([]db.Recline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecLines indicates an expected call of ListRecLines.
func (mr *MockStoreMockRecorder) ListRecLines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecLines", reflect.TypeOf((*MockStore)(nil).ListRecLines), arg0, arg1)
}

// ListYears mocks base method.
func (m *MockStore) ListYears(arg0 context.Context, arg1 db.ListYearsParams) ([]db.Year, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListYears", arg0, arg1)
	ret0, _ := ret[0].([]db.Year)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListYears indicates an expected call of ListYears.
func (mr *MockStoreMockRecorder) ListYears(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListYears", reflect.TypeOf((*MockStore)(nil).ListYears), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(arg0 context.Context, arg1 db.UpdateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), arg0, arg1)
}

// UpdateLine mocks base method.
func (m *MockStore) UpdateLine(arg0 context.Context, arg1 db.UpdateLineParams) (db.Line, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLine", arg0, arg1)
	ret0, _ := ret[0].(db.Line)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLine indicates an expected call of UpdateLine.
func (mr *MockStoreMockRecorder) UpdateLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLine", reflect.TypeOf((*MockStore)(nil).UpdateLine), arg0, arg1)
}

// UpdateLineTx mocks base method.
func (m *MockStore) UpdateLineTx(arg0 context.Context, arg1 db.UpdateLineTxParams) (db.UpdateLineTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLineTx", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateLineTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLineTx indicates an expected call of UpdateLineTx.
func (mr *MockStoreMockRecorder) UpdateLineTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLineTx", reflect.TypeOf((*MockStore)(nil).UpdateLineTx), arg0, arg1)
}

// UpdateMonth mocks base method.
func (m *MockStore) UpdateMonth(arg0 context.Context, arg1 db.UpdateMonthParams) (db.Month, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonth", arg0, arg1)
	ret0, _ := ret[0].(db.Month)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonth indicates an expected call of UpdateMonth.
func (mr *MockStoreMockRecorder) UpdateMonth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonth", reflect.TypeOf((*MockStore)(nil).UpdateMonth), arg0, arg1)
}

// UpdateRecLine mocks base method.
func (m *MockStore) UpdateRecLine(arg0 context.Context, arg1 db.UpdateRecLineParams) (db.Recline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecLine", arg0, arg1)
	ret0, _ := ret[0].(db.Recline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecLine indicates an expected call of UpdateRecLine.
func (mr *MockStoreMockRecorder) UpdateRecLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecLine", reflect.TypeOf((*MockStore)(nil).UpdateRecLine), arg0, arg1)
}

// UpdateYear mocks base method.
func (m *MockStore) UpdateYear(arg0 context.Context, arg1 db.UpdateYearParams) (db.Year, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateYear", arg0, arg1)
	ret0, _ := ret[0].(db.Year)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateYear indicates an expected call of UpdateYear.
func (mr *MockStoreMockRecorder) UpdateYear(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateYear", reflect.TypeOf((*MockStore)(nil).UpdateYear), arg0, arg1)
}
