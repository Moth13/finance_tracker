// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  title,
  owner
) VALUES (
    $1, $2
) RETURNING id, title, owner
`

type CreateCategoryParams struct {
	Title string `json:"title"`
	Owner string `json:"owner"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Title, arg.Owner)
	var i Category
	err := row.Scan(&i.ID, &i.Title, &i.Owner)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, title, owner FROM categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Title, &i.Owner)
	return i, err
}

const getCategoryForUpdate = `-- name: GetCategoryForUpdate :one
SELECT id, title, owner FROM categories
WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetCategoryForUpdate(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryForUpdate, id)
	var i Category
	err := row.Scan(&i.ID, &i.Title, &i.Owner)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, title, owner FROM categories
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListCategoriesParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Title, &i.Owner); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
