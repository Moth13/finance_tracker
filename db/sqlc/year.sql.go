// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: year.sql

package db

import (
	"context"
	"time"

	decimal "github.com/shopspring/decimal"
)

const addYearBalance = `-- name: AddYearBalance :one
UPDATE years
SET balance = balance + $1, final_balance = final_balance + $2
WHERE id = $3
RETURNING id, owner, title, description, balance, final_balance, start_date, end_date
`

type AddYearBalanceParams struct {
	Amount      decimal.Decimal `json:"amount"`
	FinalAmount decimal.Decimal `json:"final_amount"`
	ID          int64           `json:"id"`
}

func (q *Queries) AddYearBalance(ctx context.Context, arg AddYearBalanceParams) (Year, error) {
	row := q.db.QueryRow(ctx, addYearBalance, arg.Amount, arg.FinalAmount, arg.ID)
	var i Year
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Description,
		&i.Balance,
		&i.FinalBalance,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const createYear = `-- name: CreateYear :one
INSERT INTO years (
  title,
  owner,
  description,
  start_date,
  end_date
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, owner, title, description, balance, final_balance, start_date, end_date
`

type CreateYearParams struct {
	Title       string    `json:"title"`
	Owner       string    `json:"owner"`
	Description string    `json:"description"`
	StartDate   time.Time `json:"start_date"`
	EndDate     time.Time `json:"end_date"`
}

func (q *Queries) CreateYear(ctx context.Context, arg CreateYearParams) (Year, error) {
	row := q.db.QueryRow(ctx, createYear,
		arg.Title,
		arg.Owner,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
	var i Year
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Description,
		&i.Balance,
		&i.FinalBalance,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteYear = `-- name: DeleteYear :exec
DELETE FROM years WHERE id = $1
`

func (q *Queries) DeleteYear(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteYear, id)
	return err
}

const getYear = `-- name: GetYear :one
SELECT id, owner, title, description, balance, final_balance, start_date, end_date FROM years
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetYear(ctx context.Context, id int64) (Year, error) {
	row := q.db.QueryRow(ctx, getYear, id)
	var i Year
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Description,
		&i.Balance,
		&i.FinalBalance,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getYearForUpdate = `-- name: GetYearForUpdate :one
SELECT id, owner, title, description, balance, final_balance, start_date, end_date FROM years
WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetYearForUpdate(ctx context.Context, id int64) (Year, error) {
	row := q.db.QueryRow(ctx, getYearForUpdate, id)
	var i Year
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Description,
		&i.Balance,
		&i.FinalBalance,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const listYears = `-- name: ListYears :many
SELECT id, owner, title, description, balance, final_balance, start_date, end_date FROM years
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListYearsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListYears(ctx context.Context, arg ListYearsParams) ([]Year, error) {
	rows, err := q.db.Query(ctx, listYears, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Year{}
	for rows.Next() {
		var i Year
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Title,
			&i.Description,
			&i.Balance,
			&i.FinalBalance,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateYear = `-- name: UpdateYear :one
UPDATE years
SET title = $2, description = $3, start_date = $4, end_date = $5
WHERE id = $1
RETURNING id, owner, title, description, balance, final_balance, start_date, end_date
`

type UpdateYearParams struct {
	ID          int64     `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	StartDate   time.Time `json:"start_date"`
	EndDate     time.Time `json:"end_date"`
}

func (q *Queries) UpdateYear(ctx context.Context, arg UpdateYearParams) (Year, error) {
	row := q.db.QueryRow(ctx, updateYear,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
	var i Year
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Description,
		&i.Balance,
		&i.FinalBalance,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
